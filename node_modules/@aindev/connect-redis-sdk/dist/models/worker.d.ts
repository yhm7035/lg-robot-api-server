import { ClientOpts } from 'redis';
import * as Types from '../common/types';
export default class Worker {
    private redisClient;
    private listenMethodList;
    constructor(options?: ClientOpts);
    writeResponse(response: object, dbpath: string): Promise<void>;
    timeoutUnhandledRequest(clusterName: string, curTime: number): Promise<void>;
    listenRequest(clusterName: string, methods: Types.workerListenMethod): void;
    writeStatus(status: object, dbpath: string): Promise<void>;
    setClusterStatus(status: Types.ClusterStatusParams): Promise<void>;
    deleteClusterStatus(clusterName: string): Promise<void>;
    setPodStatus(status: Types.SetPodStatusParams): Promise<void>;
    deletePodStatus(clusterName: string, containerId: string, podId: string): Promise<void>;
    setStorageStatus(status: Types.SetStorageStatusParams): Promise<void>;
    deleteStorageStatus(clusterName: string, storageId: string): Promise<void>;
    getAllContainers(clusterName: string): Promise<{}>;
    getAllStorages(clusterName: string): Promise<{}>;
}
