"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const redis_1 = __importDefault(require("redis"));
const util_1 = require("util");
class RedisClient {
    constructor(options) {
        // Cannot use 'get/set' command in the context of a subscribed client
        // We need both 'get/set' client and 'subscribe' client.
        this.client = redis_1.default.createClient(options);
        this.onSub = redis_1.default.createClient(options);
        this.onceSub = redis_1.default.createClient(options);
        this.callbackTable = {};
        this.onSub.on('pmessage', (pattern, channel, message) => {
            // _pattern : __keyspace@0__:${pattern}
            // channel : pattern matched value
            // message : type of event (ex. set, hset)
            const _pattern = pattern.slice(15);
            if ((message === 'set' || message === 'hset')
                && this.callbackTable[_pattern]) {
                const key = channel.slice(15);
                this.get(key).then((value) => {
                    this.callbackTable[_pattern](null, key, value);
                }).catch((err) => {
                    this.callbackTable[_pattern](err, null, null);
                });
            }
        });
    }
    unref() {
        this.client.unref();
        this.onSub.unref();
        this.onceSub.unref();
    }
    getClient() {
        return this.client;
    }
    on(pattern, callback) {
        if (!this.callbackTable[pattern]) {
            this.callbackTable[pattern] = callback;
            this.onSub.psubscribe(`__keyspace@0__:${pattern}`);
        }
    }
    off(pattern) {
        this.onSub.punsubscribe(`__keyspace@0__:${pattern}`);
        delete this.callbackTable[pattern];
    }
    /* once
     * Write `value` to `key` after subscribing `pattern` key event
     */
    once(key, value, pattern) {
        return new Promise((resolve, reject) => {
            this.onceSub.psubscribe(`__keyspace@0__:${pattern}`);
            this.onceSub.on('pmessage', (_pattern, channel, message) => {
                if (message === 'set' || message === 'hset') {
                    this.onceSub.unsubscribe(`__keyspace@0__:${pattern}`);
                    const waitKey = channel.slice(15);
                    this.get(waitKey).then((waitValue) => {
                        resolve(waitValue);
                    }).catch((err) => {
                        reject(err);
                    });
                }
            });
            this.set(key, value);
        });
    }
    keys(pattern) {
        return __awaiter(this, void 0, void 0, function* () {
            const scan = util_1.promisify(this.client.scan).bind(this.client);
            const keys = [];
            let cursor = '0';
            do {
                const res = yield scan(cursor, 'MATCH', pattern);
                const [nextCursor, curKeys] = res;
                cursor = nextCursor;
                keys.push(...curKeys);
            } while (cursor !== '0');
            return keys;
        });
    }
    get(key) {
        return new Promise((resolve, reject) => {
            this.client.type(key, (err, type) => {
                if (err) {
                    reject(err);
                }
                else if (type === 'hash') {
                    this.client.hgetall(key, (error, value) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            resolve(value);
                        }
                    });
                }
                else { // type === 'string'
                    this.client.get(key, (error, value) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            resolve(value);
                        }
                    });
                }
            });
        });
    }
    set(key, value) {
        return new Promise((resolve, reject) => {
            if (typeof value === 'object') {
                this.client.hmset(key, Object.assign({}, value), (err) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve();
                    }
                });
            }
            else { // type === 'string'
                this.client.set(key, value, (err) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve();
                    }
                });
            }
        });
    }
    del(key) {
        return new Promise((resolve, reject) => {
            this.client.type(key, (err, type) => {
                if (err) {
                    reject(err);
                }
                else if (type === 'hash') {
                    this.client.hkeys(key, (errHkeys, fields) => {
                        if (errHkeys) {
                            reject(errHkeys);
                        }
                        else {
                            this.client.hdel(key, ...fields, (error, reply) => {
                                if (error) {
                                    reject(error);
                                }
                                else {
                                    resolve(reply);
                                }
                            });
                        }
                    });
                }
                else { // type === 'string'
                    this.client.del(key, (error, reply) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            resolve(reply);
                        }
                    });
                }
            });
        });
    }
}
exports.default = RedisClient;
//# sourceMappingURL=redis.js.map