"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const redis_1 = __importDefault(require("./redis"));
class Worker {
    constructor(options) {
        this.redisClient = new redis_1.default(options);
    }
    writeResponse(response, dbpath) {
        return __awaiter(this, void 0, void 0, function* () {
            const timeResponse = Object.assign({ updatedAt: Date.now() }, response);
            yield this.redisClient.set(dbpath, timeResponse);
        });
    }
    timeoutUnhandledRequest(clusterName, curTime) {
        return __awaiter(this, void 0, void 0, function* () {
            const redis = this.redisClient.getClient();
            const scan = util_1.promisify(redis.scan).bind(redis);
            const pattern = `worker:request_queue:${clusterName}:*`;
            let cursor = '0';
            do {
                const res = yield scan(cursor, 'MATCH', pattern);
                const [nextCursor, curKeys] = res;
                cursor = nextCursor;
                for (const key of curKeys) {
                    const requestId = key.split(':')[3];
                    const request = yield this.redisClient.get(key);
                    if (request.updatedAt < curTime) {
                        const resKey = `worker:response:${clusterName}:${requestId}`;
                        const response = yield this.redisClient.get(resKey);
                        if (!response) {
                            // unhandled request
                            yield this.writeResponse({
                                statusCode: "2" /* unhandledRequest */,
                                errMessage: 'request timeout',
                            }, resKey);
                        }
                    }
                }
            } while (cursor !== '0');
        });
    }
    listenRequest(clusterName, methods) {
        const pattern = `worker:request_queue:${clusterName}:*`;
        this.listenMethodList = methods;
        const curTime = Date.now();
        this.redisClient.on(pattern, (err, key, value) => __awaiter(this, void 0, void 0, function* () {
            const requestId = key === null || key === void 0 ? void 0 : key.split(':')[3];
            const resPath = `worker:response:${clusterName}:${requestId}`;
            const { type, payload } = value;
            if (err) {
                yield this.writeResponse({
                    statusCode: "500" /* unexpected */,
                    errMessage: err,
                }, resPath);
            }
            else if (type && this.listenMethodList[type]) {
                // parse stringified payload
                try {
                    const res = yield this.listenMethodList[type](JSON.parse(payload));
                    yield this.writeResponse({
                        statusCode: "0" /* success */,
                        result: JSON.stringify(res),
                    }, resPath);
                }
                catch (e) {
                    yield this.writeResponse({
                        statusCode: e.statusCode,
                        errMessage: e.errMessage,
                    }, resPath);
                }
            }
            else {
                yield this.writeResponse({
                    statusCode: "1" /* invalidParams */,
                    errMessage: 'invalid type',
                }, resPath);
            }
        }));
        this.timeoutUnhandledRequest(clusterName, curTime);
    }
    writeStatus(status, dbpath) {
        return __awaiter(this, void 0, void 0, function* () {
            const timePayload = {
                updatedAt: Date.now(),
                status: JSON.stringify(status),
            };
            yield this.redisClient.set(dbpath, timePayload);
        });
    }
    setClusterStatus(status) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.writeStatus(status, `worker:info:${status.clusterName}`);
        });
    }
    deleteClusterStatus(clusterName) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.redisClient.del(`worker:info:${clusterName}`);
        });
    }
    setPodStatus(status) {
        return __awaiter(this, void 0, void 0, function* () {
            const { clusterName, containerId, podId } = status;
            const key = `container:${clusterName}:${containerId}:${podId}`;
            yield this.writeStatus(status.podStatus, key);
        });
    }
    deletePodStatus(clusterName, containerId, podId) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = `container:${clusterName}:${containerId}:${podId}`;
            yield this.redisClient.del(key);
        });
    }
    setStorageStatus(status) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = `storage:${status.clusterName}:${status.storageId}`;
            yield this.writeStatus(status.storageStatus, key);
        });
    }
    deleteStorageStatus(clusterName, storageId) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = `storage:${clusterName}:${storageId}`;
            yield this.redisClient.del(key);
        });
    }
    getAllContainers(clusterName) {
        return __awaiter(this, void 0, void 0, function* () {
            const keys = yield this.redisClient.keys(`container:${clusterName}:*`);
            const res = {};
            for (const key of keys) {
                const value = yield this.redisClient.get(key);
                res[key] = {
                    updatedAt: value.updatedAt,
                    status: JSON.parse(value.status),
                };
            }
            return res;
        });
    }
    getAllStorages(clusterName) {
        return __awaiter(this, void 0, void 0, function* () {
            const keys = yield this.redisClient.keys(`storage:${clusterName}:*`);
            const res = {};
            for (const key of keys) {
                const value = yield this.redisClient.get(key);
                res[key] = {
                    updatedAt: value.updatedAt,
                    status: JSON.parse(value.status),
                };
            }
            return res;
        });
    }
}
exports.default = Worker;
//# sourceMappingURL=worker.js.map