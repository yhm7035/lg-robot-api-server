export interface RedisCallback {
    (err: Error | null, key: string | null, value: any): void;
}
export declare type EnvType = 'prod' | 'staging';
export declare type PodPhaseList = 'failed' | 'pending' | 'createContainer' | 'success';
export declare type StorageStatus = 'failed' | 'pending' | 'createStorage' | 'success';
export declare type ConditionType = 'Initialized' | 'Ready' | 'ContainersReady' | 'PodScheduled';
export declare type ListenMethodList = 'deploy' | 'redeploy' | 'undeploy' | 'createNamespace' | 'deleteNamespace' | 'createStorage' | 'deleteStorage' | 'createSecret' | 'getContainerLog' | 'putStorageToFtp' | 'getStorageFromFtp' | 'createSnapshotFromContainer' | 'getSnapshotStatus';
export declare type workerListenMethod = {
    [type in ListenMethodList]: Function;
};
export declare type NodeInfo = {
    cpu: number;
    memory: number;
    gpu: number;
};
export declare type ClusterStatusParams = {
    clusterName: string;
    type: string;
    nodePool: {
        [nodePoolName: string]: {
            cpu: number;
            memory: number;
            gpuType: string;
            osImage: string;
            isAutoScaleEnabled: boolean;
            nodes: {
                [nodeId: string]: {
                    capacity: NodeInfo;
                    allocatable: NodeInfo;
                };
            };
        };
    };
};
export declare type ConditionError = {
    [type: string]: {
        reason?: string;
        message?: string;
    };
};
export declare type PodStatusParams = {
    podName: string;
    namespaceId: string;
    status: {
        phase: PodPhaseList;
        conditionError?: ConditionError;
    };
};
export declare type SetPodStatusParams = {
    clusterName: string;
    containerId: string;
    podId: string;
    podStatus: PodStatusParams;
};
export declare type StorageStatusParams = {
    status: StorageStatus;
};
export declare type SetStorageStatusParams = {
    clusterName: string;
    storageId: string;
    storageStatus: StorageStatusParams;
};
export declare type RequestReturn<T> = {
    statusCode: string;
    result?: T;
    errMessage?: string;
    updatedAt: number;
};
export declare type DeployParams = {
    clusterName: string;
    namespaceId: string;
    deployTemplateName?: string;
    maxDuration?: number;
    containerInfo: {
        imageName: string;
        isNodePort?: boolean;
        nodePoolName: string;
        storageSpec?: {
            [storageId: string]: {
                mountPath: string;
            };
        };
        secretSpec?: {
            [secretId: string]: {
                mountPath: string;
            };
        };
        hwSpec: {
            cpu: number;
            memory: number;
            gpu: number;
        };
        replicas?: number;
        command?: string;
        env?: object;
        port: number[];
    };
    requestTimeout?: number;
    runningTimeout?: number;
};
export declare type DeployReturn = {
    clusterName: string;
    containerId: string;
    nodePort?: {
        clusterIp: string;
        hostIp: string;
        port: {
            [port: string]: number;
        };
    };
    endpoint: {
        [port: string]: string;
    };
};
export declare type RedeployParams = {
    clusterName: string;
    namespaceId: string;
    containerId: string;
    option?: {
        port?: number[];
        imageName?: string;
        replicas?: number;
        env?: object;
    };
};
export declare type UndeployParams = {
    clusterName: string;
    namespaceId: string;
    containerId: string;
};
export declare type CreateNamespaceParams = {
    clusterName: string;
};
export declare type CreateNamespaceReturn = {
    namespaceId: string;
};
export declare type DeleteNamespaceParams = {
    clusterName: string;
    namespaceId: string;
};
export declare type CreateStorageParams = {
    clusterName: string;
    namespaceId: string;
    capacity: number;
    sharedNfs?: {
        ip: string;
        basePath: string;
    };
};
export declare type CreateStorageReturn = {
    storageId: string;
    nfsInfo?: {
        ip: string;
        basePath: string;
    };
};
export declare type DeleteStorageParams = {
    clusterName: string;
    namespaceId: string;
    storageId: string;
    isSharedNfs: boolean;
};
export declare type CreateSecretParams = {
    clusterName: string;
    namespaceId: string;
    name: string;
    type: string;
    data: {
        [key: string]: string;
    };
};
export declare type PutStorageToFtpParams = {
    clusterName: string;
    namespaceId: string;
    storageId: string;
    toStorageId: string;
    timestamp: string;
};
export declare type GetStorageFromFtpParams = {
    clusterName: string;
    namespaceId: string;
    storageId: string;
    timestamp: string;
};
export declare type GetContainerLogParams = {
    clusterName: string;
    namespaceId: string;
    containerId: string;
    fromTimestamp?: number;
};
export declare type GetContainerLogReturn = {
    log: string;
};
export declare type GetClusterListParams = {
    cpu: number;
    memory: number;
    gpu?: object;
};
export declare type GetClusterListReturn = {
    clusterName: string;
    type: string;
    nodePool: {
        [nodePoolName: string]: {
            gpuType: string;
            osImage: string;
            isAutoScaleEnabled: boolean;
            nodes?: {
                [nodeId: string]: {
                    capacity: NodeInfo;
                    allocatable: NodeInfo;
                };
            };
        };
    };
    updatedAt: number;
};
export declare type StatusGetterReturn<T> = {
    updatedAt: number;
    status: T;
} | null;
export declare type GetClusterStatusParams = {
    clusterName: string;
};
export declare type GetClusterStatusReturn = ClusterStatusParams;
export declare type GetContainerStatusParams = {
    clusterName: string;
    containerId: string;
};
export declare type GetContainerStatusReturn = {
    containerStatus: PodPhaseList;
} | null;
export declare type GetStorageStatusParams = {
    clusterName: string;
    storageId: string;
};
export declare type GetStorageStatusReturn = StorageStatusParams;
export declare type CreateSnapshotFromContainerParams = {
    clusterName: string;
    namespaceId: string;
    containerId: string;
    userId: string;
    resultImagePrefix?: string;
    webhook?: string;
};
export declare type CreateSnapshotFromContainerReturn = {
    snapshotJobName: string;
    snapshotJobStatus: string;
    snapshotDockerImageUri?: string;
} | null;
export declare type GetSnapshotStatusParams = {
    clusterName: string;
    snapshotJobName: string;
};
export declare type GetSnapshotStatusReturn = CreateSnapshotFromContainerReturn;
