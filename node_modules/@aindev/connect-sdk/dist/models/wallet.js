"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bip39_1 = require("bip39");
const ainUtil = __importStar(require("@ainblockchain/ain-util"));
const ain_js_1 = __importDefault(require("@ainblockchain/ain-js"));
const hdkey_1 = __importDefault(require("hdkey"));
const constants_1 = require("../common/constants");
class Wallet {
    constructor(mnemonic, type) {
        const key = hdkey_1.default.fromMasterSeed(bip39_1.mnemonicToSeedSync(mnemonic));
        this.wallet = key.derive("m/44'/412'/0'/0/0"); /* default wallet address for AIN */
        this.mnemonic = mnemonic;
        this.secretKey = `0x${this.wallet.privateKey.toString('hex')}`;
        this.address = ainUtil.toChecksumAddress(`0x${ainUtil.pubToAddress(this.wallet.publicKey, true).toString('hex')}`);
        this.ainJs = new ain_js_1.default(type === 'prod' ? constants_1.MAINNET_PROVIDER_URL : constants_1.TESTNET_PROVIDER_URL);
        this.ainJs.wallet.addFromHDWallet(mnemonic);
        this.ainJs.wallet.setDefaultAccount(this.address);
    }
    getWallet() {
        return this.wallet;
    }
    getMnemonic() {
        return this.mnemonic;
    }
    getSecretKey() {
        return this.secretKey;
    }
    getAddress() {
        return this.address;
    }
    getAinJs() {
        return this.ainJs;
    }
    signaturePayload(payload) {
        // Remove undefined data
        const data = payload;
        const fields = [];
        Object.keys(data).forEach((name) => {
            fields.push({
                name,
                default: Buffer.from([]),
            });
            if (typeof data[name] === 'object') {
                data[name] = JSON.stringify(data[name]);
            }
        });
        const signature = ainUtil.ecSignMessage(ainUtil.serialize(data, fields), ainUtil.toBuffer(this.secretKey));
        return {
            payload: data,
            signature,
            fields,
            address: this.address,
        };
    }
}
exports.default = Wallet;
//# sourceMappingURL=wallet.js.map