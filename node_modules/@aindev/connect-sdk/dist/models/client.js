"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nanoid_1 = require("nanoid");
const firebase_1 = __importDefault(require("../common/firebase"));
const wallet_1 = __importDefault(require("./wallet"));
const PodPhasePriority = {
    failed: 1,
    pending: 2,
    createContainer: 3,
    success: 4,
};
function getRandomRequestId() {
    const nanoid = nanoid_1.customAlphabet('abcdefghijklmnopqrstuvwxyz0123456789', 25);
    return nanoid();
}
class Client {
    constructor(mnemonic, env, config) {
        this.wallet = new wallet_1.default(mnemonic, env);
        this.firebase = new firebase_1.default(env, config);
        this.sendTx = this.firebase.getFunctions().httpsCallable('sendTransaction');
    }
    awaitResponse(refPath) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.firebase.getDatabase().ref(`${refPath}/response`)
                    .on('value', (snapshot) => {
                    if (snapshot.exists()) {
                        this.firebase.getDatabase().ref(`${refPath}/response`).off();
                        const res = snapshot.val();
                        resolve(res);
                    }
                });
            });
        });
    }
    sendRequest(type, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                type,
                payload: params,
                address: this.wallet.getAddress(),
                updatedAt: this.firebase.getTimestamp(),
            };
            const data = this.wallet.signaturePayload({
                payload: JSON.stringify(payload),
            });
            const { targetAddress, clusterName } = params;
            const requestId = getRandomRequestId();
            const refPath = `/worker/request_queue/${clusterName}@${targetAddress}/${requestId}`;
            yield this.sendTx(Object.assign({ dbpath: refPath }, data));
            const res = yield this.awaitResponse(refPath);
            return res;
        });
    }
    deploy(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.sendRequest('deploy', params);
            return res;
        });
    }
    deployForDocker(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.sendRequest('deployForDocker', params);
            return res;
        });
    }
    redeploy(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.sendRequest('redeploy', params);
            return res;
        });
    }
    undeploy(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.sendRequest('undeploy', params);
            return res;
        });
    }
    undeployForDocker(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.sendRequest('undeployForDocker', params);
            return res;
        });
    }
    createNamespace(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.sendRequest('createNamespace', params);
            return res;
        });
    }
    deleteNamespace(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.sendRequest('deleteNamespace', params);
            return res;
        });
    }
    createStorage(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.sendRequest('createStorage', params);
            return res;
        });
    }
    deleteStorage(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.sendRequest('deleteStorage', params);
            return res;
        });
    }
    /* Secret */
    createSecret(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.sendRequest('createSecret', params);
            return res;
        });
    }
    /* FTP */
    putStorageToFtp(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.sendRequest('putStorageToFtp', params);
            return res;
        });
    }
    getStorageFromFtp(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.sendRequest('getStorageFromFtp', params);
            return res;
        });
    }
    /* Container Log */
    getContainerLog(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.sendRequest('getContainerLog', params);
            return res;
        });
    }
    execKubeCtl(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.sendRequest('execKubeCtl', params);
            return res;
        });
    }
    getClusterList(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = [];
            let list;
            const refPath = '/worker/info';
            if (params && params.targetAddress) {
                // filtered by address
                const snap = yield this.firebase.getDatabase().ref(refPath)
                    .orderByChild('status/address').equalTo(params.targetAddress)
                    .once('value');
                list = snap.val();
            }
            else {
                const snap = yield this.firebase.getDatabase().ref(refPath).once('value');
                list = snap.val();
            }
            const clusterKeys = Object.keys(list);
            for (const clusterKey of clusterKeys) {
                const cluster = list[clusterKey];
                if (cluster.params.isDocker) { // Docker Workers
                    // TODO: update for docker hwSpec
                    res.push({
                        updatedAt: cluster.updatedAt,
                        address: cluster.params.address,
                        clusterName: cluster.params.clusterName,
                        isDocker: true,
                    });
                }
                else { // K8s Workers
                    const nodePoolIds = Object.keys(cluster.params.nodePool || {});
                    const resultNodePool = {};
                    for (const nodePoolId of nodePoolIds) {
                        const nodePool = cluster.params.nodePool[nodePoolId];
                        // choose proper GPU type when gpu option specified
                        if (!params || !params.nodeInfo || !params.nodeInfo.gpu
                            || params.nodeInfo.gpu[nodePool.gpuType] !== undefined) {
                            const nodeIds = Object.keys(nodePool.nodes);
                            const resultNodes = {};
                            for (const nodeId of nodeIds) {
                                const node = nodePool.nodes[nodeId];
                                if (!params || !params.nodeInfo
                                    || (params.nodeInfo.cpu <= node.allocatable.cpu
                                        && params.nodeInfo.memory <= node.allocatable.memory
                                        && (!params.nodeInfo.gpu
                                            || params.nodeInfo.gpu[nodePool.gpuType] <= node.allocatable.gpu))) {
                                    resultNodes[nodeId] = node.allocatable;
                                }
                            }
                            if (Object.keys(resultNodes).length !== 0) {
                                resultNodePool[nodePoolId] = {
                                    gpuType: nodePool.gpuType,
                                    osImage: nodePool.osImage,
                                    nodes: resultNodes,
                                };
                            }
                        }
                    }
                    if (Object.keys(resultNodePool).length !== 0) {
                        res.push({
                            updatedAt: cluster.updatedAt,
                            address: cluster.params.address,
                            clusterName: cluster.params.clusterName,
                            nodePool: resultNodePool,
                        });
                    }
                }
            }
            return res;
        });
    }
    getClusterStatus(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { targetAddress, clusterName } = params;
            const snap = yield this.firebase.getDatabase().ref(`/worker/info/${clusterName}@${targetAddress}`).once('value');
            if (!snap.exists()) {
                return null;
            }
            return snap.val();
        });
    }
    getContainerStatus(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { clusterName, targetAddress, containerId } = params;
            const statusPath = `/container/${clusterName}@${targetAddress}/${containerId}`;
            const snap = yield this.firebase.getDatabase().ref(statusPath).once('value');
            if (!snap.exists()) {
                return null;
            }
            const podIds = Object.keys(snap.val());
            if (podIds.length === 0) {
                return null;
            }
            let curStatus = 'failed';
            for (const podId of podIds) {
                const pod = snap.val()[podId];
                const podStatus = pod.params.status.phase;
                if (PodPhasePriority[curStatus] < PodPhasePriority[podStatus]) {
                    curStatus = podStatus;
                }
            }
            return { containerStatus: curStatus };
        });
    }
    getContainerStatusForDocker(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { clusterName, targetAddress, containerId } = params;
            const statusPath = `/container/${clusterName}@${targetAddress}/${containerId}`;
            const snap = yield this.firebase.getDatabase().ref(statusPath).once('value');
            if (!snap.exists()) {
                return null;
            }
            return snap.val();
        });
    }
    getStorageStatus(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { clusterName, targetAddress, storageId } = params;
            const statusPath = `/storage/${clusterName}@${targetAddress}/${storageId}`;
            const snap = yield this.firebase.getDatabase().ref(statusPath).once('value');
            if (!snap.exists()) {
                return null;
            }
            return snap.val();
        });
    }
    getAllContainers(clusterName, targetAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const snap = yield this.firebase.getInstance().database()
                .ref(`/container/${clusterName}@${targetAddress}`).once('value');
            if (!snap.exists) {
                return null;
            }
            return snap.val();
        });
    }
    getAllContainersForDocker(clusterName, targetAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const snap = yield this.firebase.getInstance().database()
                .ref(`/container/${clusterName}@${targetAddress}`).once('value');
            if (!snap.exists) {
                return null;
            }
            return snap.val();
        });
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map