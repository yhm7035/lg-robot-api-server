import * as Types from '../common/types';
export default class Client {
    private wallet;
    private firebase;
    private sendTx;
    constructor(mnemonic: string, env: Types.EnvType, config?: Types.FirebaseConfig);
    private awaitResponse;
    private sendRequest;
    deploy(params: Types.DeployParams): Promise<Types.RequestReturn<Types.DeployReturn>>;
    deployForDocker(params: Types.DeployForDockerParams): Promise<Types.RequestReturn<Types.DeployForDockerReturn>>;
    redeploy(params: Types.RedeployParams): Promise<Types.RequestReturn<null>>;
    undeploy(params: Types.UndeployParams): Promise<Types.RequestReturn<null>>;
    undeployForDocker(params: Types.UndeployForDockerParams): Promise<Types.RequestReturn<null>>;
    createNamespace(params: Types.CreateNamespaceParams): Promise<Types.RequestReturn<Types.CreateNamespaceReturn>>;
    deleteNamespace(params: Types.DeleteNamespaceParams): Promise<Types.RequestReturn<null>>;
    createStorage(params: Types.CreateStorageParams): Promise<Types.RequestReturn<Types.CreateStorageReturn>>;
    deleteStorage(params: Types.DeleteStorageParams): Promise<Types.RequestReturn<null>>;
    createSecret(params: Types.CreateSecretParams): Promise<Types.RequestReturn<null>>;
    putStorageToFtp(params: Types.PutStorageToFtpParams): Promise<Types.RequestReturn<null>>;
    getStorageFromFtp(params: Types.GetStorageFromFtpParams): Promise<Types.RequestReturn<null>>;
    getContainerLog(params: Types.GetContainerLogParams): Promise<Types.RequestReturn<Types.GetContainerLogReturn>>;
    execKubeCtl(params: any): Promise<Types.RequestReturn<any>>;
    getClusterList(params?: Types.GetClusterListParams): Promise<Types.GetClusterListReturn[]>;
    getClusterStatus(params: Types.GetClusterStatusParams): Promise<Types.StatusGetterReturn<Types.GetClusterStatusReturn>>;
    getContainerStatus(params: Types.GetContainerStatusParams): Promise<Types.GetContainerStatusReturn>;
    getContainerStatusForDocker(params: Types.GetContainerStatusForDockerParams): Promise<Types.GetContainerStatusForDockerReturn>;
    getStorageStatus(params: Types.GetStorageStatusParams): Promise<Types.StatusGetterReturn<Types.GetStorageStatusReturn>>;
    getAllContainers(clusterName: string, targetAddress: string): Promise<Types.GetAllContainersReturn>;
    getAllContainersForDocker(clusterName: string, targetAddress: string): Promise<Types.GetAllContainersForDockerReturn>;
}
