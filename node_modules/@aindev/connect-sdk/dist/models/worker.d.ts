import * as Types from '../common/types';
export default class Worker {
    private wallet;
    private firebase;
    private listenMethodList;
    private clusterName;
    constructor(mnemonic: string, clusterName: string, env: Types.EnvType, config?: Types.FirebaseConfig);
    getAddress(): string;
    writeResult(result: any, dbpath: string): Promise<void>;
    listenRequest(methods: Types.workerListenMethod): void;
    deletePath(path: string): Promise<void>;
    writeStatus(status: object, dbpath: string): Promise<void>;
    setClusterStatus(status: Types.ClusterStatusParams): Promise<void>;
    deleteClusterStatus(clusterName: string): Promise<void>;
    setWorkerStatusForDocker(clusterName: string): Promise<void>;
    deleteWorkerStatusForDocker(clusterName: string): Promise<void>;
    setPodStatus(status: Types.SetPodStatusParams): Promise<void>;
    deletePodStatus(clusterName: string, containerId: string, podId: string): Promise<void>;
    setContainerStatusForDocker(status: Types.SetContainerStatusForDocker): Promise<void>;
    deleteContainerStatusForDocker(clusterName: string, containerId: string): Promise<void>;
    setStorageStatus(status: Types.SetStorageStatusParams): Promise<void>;
    deleteStorageStatus(clusterName: string, storageId: string): Promise<void>;
    getAllContainers(clusterName: string): Promise<Types.GetAllContainersReturn>;
    getAllStorages(clusterName: string): Promise<Types.GetAllStoragesReturn>;
    getAllContainersForDocker(clusterName: string): Promise<Types.GetAllContainersForDockerReturn>;
}
