export interface RedisCallback {
    (err: Error | null, key: string | null, value: any): void;
}
export declare type EnvType = 'prod' | 'staging';
export declare type FirebaseConfig = {
    apiKey: string;
    authDomain: string;
    databaseURL: string;
    projectId: string;
    storageBucket: string;
    messagingSenderId: string;
    appId: string;
    measurementId: string;
};
export declare type PodPhaseList = 'failed' | 'pending' | 'createContainer' | 'success';
export declare type StorageStatus = 'failed' | 'pending' | 'createStorage' | 'success';
export declare type ConditionType = 'Initialized' | 'Ready' | 'ContainersReady' | 'PodScheduled';
export declare type ListenMethodList = 'deploy' | 'redeploy' | 'undeploy' | 'deployForDocker' | 'undeployForDocker' | 'createNamespace' | 'deleteNamespace' | 'createStorage' | 'deleteStorage' | 'createSecret' | 'getContainerLog' | 'putStorageToFtp' | 'getStorageFromFtp';
export declare type workerListenMethod = {
    [type: string]: Function;
};
export declare type NodeInfo = {
    cpu: number;
    memory: number;
    gpu: number;
};
export declare type ContainerStatusForDocker = {
    status: string;
    image: string;
};
export declare type ClusterStatusParams = {
    clusterName: string;
    nodePool: {
        [nodePoolName: string]: {
            gpuType: string;
            osImage: string;
            nodes: {
                [nodeId: string]: {
                    capacity: NodeInfo;
                    allocatable: NodeInfo;
                };
            };
        };
    };
};
export declare type PodStatusParams = {
    podName: string;
    namespaceId: string;
    image: string;
    status: {
        phase: PodPhaseList;
        message?: string;
        startTime?: string;
        condition?: {
            type: ConditionType;
            status: boolean;
            reason?: string;
            message?: string;
        };
    };
};
export declare type SetPodStatusParams = {
    clusterName: string;
    containerId: string;
    podId: string;
    podStatus: PodStatusParams;
};
export declare type SetContainerStatusForDocker = {
    clusterName: string;
    containerId: string;
    containerStatus: ContainerStatusForDocker;
};
export declare type StorageStatusParams = {
    status: StorageStatus;
};
export declare type SetStorageStatusParams = {
    clusterName: string;
    storageId: string;
    storageStatus: StorageStatusParams;
};
export declare type GetAllContainersReturn = {
    [containerId: string]: {
        [podId: string]: {
            updatedAt: number;
            params: PodStatusParams;
        };
    };
} | null;
export declare type GetAllStoragesReturn = {
    [storageId: string]: {
        updatedAt: number;
        status: StorageStatusParams;
    };
} | null;
export declare type GetAllContainersForDockerReturn = {
    [containerId: string]: ContainerStatusForDocker;
} | null;
export declare type RequestReturn<T> = {
    statusCode: string;
    result?: T;
    errMessage?: string;
    updatedAt: number;
};
export declare type DeployParams = {
    targetAddress: string;
    clusterName: string;
    namespaceId: string;
    deployTemplateName?: string;
    containerInfo: {
        imageName: string;
        nodePoolName: string;
        storageSpec?: {
            [storageId: string]: {
                mountPath: string;
                subPath?: string;
                readOnly?: 0 | 1;
            };
        };
        secretSpec?: {
            [secretId: string]: {
                mountPath: string;
            };
        };
        hwSpec: {
            cpu: number;
            memory: number;
            gpu: number;
        };
        replicas?: number;
        command?: string;
        env?: object;
        port: number[];
    };
    maxDuration?: number;
    requestTimeout?: number;
    runningTimeout?: number;
};
export declare type DeployReturn = {
    targetAddress: string;
    clusterName: string;
    containerId: string;
    endpoint: {
        [post: string]: string;
    };
};
export declare type RedeployParams = {
    targetAddress: string;
    clusterName: string;
    namespaceId: string;
    containerId: string;
    option: {
        port?: number[];
        imageName?: string;
        replicas?: number;
        env?: object;
    };
};
export declare type UndeployParams = {
    targetAddress: string;
    clusterName: string;
    namespaceId: string;
    containerId: string;
};
export declare type DeployForDockerParams = {
    clusterName: string;
    targetAddress: string;
    image: string;
    env?: {
        [key: string]: string;
    };
    command?: string[];
};
export declare type DeployForDockerReturn = {
    containerId: string;
};
export declare type UndeployForDockerParams = {
    clusterName: string;
    targetAddress: string;
    containerId: string;
};
export declare type CreateNamespaceParams = {
    targetAddress: string;
    clusterName: string;
};
export declare type CreateNamespaceReturn = {
    namespaceId: string;
};
export declare type DeleteNamespaceParams = {
    targetAddress: string;
    clusterName: string;
    namespaceId: string;
};
export declare type CreateStorageParams = {
    targetAddress: string;
    clusterName: string;
    namespaceId: string;
    capacity: number;
    nfsInfo?: {
        server: string;
        path: string;
    };
};
export declare type CreateStorageReturn = {
    storageId: string;
};
export declare type DeleteStorageParams = {
    targetAddress: string;
    clusterName: string;
    namespaceId: string;
    storageId: string;
};
export declare type CreateSecretParams = {
    targetAddress: string;
    clusterName: string;
    namespaceId: string;
    name: string;
    type: string;
    data: {
        [key: string]: string;
    };
};
export declare type PutStorageToFtpParams = {
    targetAddress: string;
    clusterName: string;
    namespaceId: string;
    storageId: string;
    toStorageId: string;
    timestamp: string;
};
export declare type GetStorageFromFtpParams = {
    targetAddress: string;
    clusterName: string;
    namespaceId: string;
    storageId: string;
    timestamp: string;
};
export declare type GetContainerLogParams = {
    targetAddress: string;
    clusterName: string;
    namespaceId: string;
    containerId: string;
    fromTimestamp?: number;
};
export declare type GetContainerLogReturn = {
    log: string;
};
export declare type GetClusterListParams = {
    targetAddress?: string;
    nodeInfo?: {
        cpu: number;
        memory: number;
        gpu?: object;
    };
};
export declare type GetClusterListReturn = {
    updatedAt: number;
    address: string;
    clusterName: string;
    isDocker?: boolean;
    nodePool?: {
        [nodePoolName: string]: {
            gpuType: string;
            osImage: string;
            nodes: {
                [nodeId: string]: NodeInfo;
            };
        };
    };
};
export declare type StatusGetterReturn<T> = {
    updatedAt: number;
    status: T;
} | null;
export declare type GetClusterStatusParams = {
    targetAddress: string;
    clusterName: string;
};
export declare type GetClusterStatusReturn = ClusterStatusParams;
export declare type GetContainerStatusParams = {
    targetAddress: string;
    clusterName: string;
    containerId: string;
};
export declare type GetContainerStatusReturn = {
    containerStatus: PodPhaseList;
} | null;
export declare type GetContainerStatusForDockerParams = {
    clusterName: string;
    targetAddress: string;
    containerId: string;
};
export declare type GetContainerStatusForDockerReturn = ContainerStatusForDocker | null;
export declare type GetStorageStatusParams = {
    targetAddress: string;
    clusterName: string;
    storageId: string;
};
export declare type GetStorageStatusReturn = StorageStatusParams;
