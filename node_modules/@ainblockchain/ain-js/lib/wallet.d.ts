/// <reference types="node" />
import { Accounts, Account, TransactionBody, V3Keystore, V3KeystoreOptions } from './types';
import Ain from './ain';
export default class Wallet {
    defaultAccount?: string | null;
    accounts: Accounts;
    _length: number;
    ain: Ain;
    /**
     * @constructor
     */
    constructor(ain: Ain);
    /**
     * Getter for the number of accounts in the wallet.
     */
    readonly length: number;
    /**
     * Returns the full public key of the given address.
     * @param {string} address
     * @return {string}
     */
    getPublicKey(address: string): string;
    /**
     * Creates {numberOfAccounts} new accounts and add them to the wallet.
     * @param {number} numberOfAccounts
     */
    create(numberOfAccounts: number): Array<string>;
    /**
     * Returns whether the address has already been added to the wallet.
     * @param {string} address
     * @return {boolean}
     */
    isAdded(address: string): boolean;
    /**
     * Adds a new account from the given private key.
     * @param {string} privateKey
     */
    add(privateKey: string): string;
    /**
     * Adds an account from a seed phrase. Only the account at the given
     * index (default = 0) will be added.
     * @param {string} seedPhrase
     * @param {number} index
     * @return {string} - The address of the newly added account.
     */
    addFromHDWallet(seedPhrase: string, index?: number): string;
    /**
     * Adds an account from a V3 Keystore.
     * @param {V3Keystore | string} v3Keystore
     * @param {string} [password]
     * @return {string} - The address of the newly added account.
     */
    addFromV3Keystore(v3Keystore: V3Keystore | string, password: string): string;
    /**
     * Removes an account
     * @param {string} address
     */
    remove(address: string): void;
    /**
     * Sets the default account as {address}. The account should be already added
     * in the wallet.
     * @param {string} address
     */
    setDefaultAccount(address: string): void;
    /**
     * Removes a default account (sets it to null).
     */
    removeDefaultAccount(): void;
    /**
     * Clears the wallet (remove all account information).
     */
    clear(): void;
    /**
     * Returns the "implied" address. If address is not given,
     * it returns the defaultAccount. It throws an error if
     * an address is not given and defaultAccount is not set, or
     * the specified address is not added to the wallet.
     * @param {string} address
     */
    getImpliedAddress(address?: string): string;
    /**
     * Returns the AIN balance of the address.
     * @param {string} address - Defaults to the defaultAccount.
     */
    getBalance(address?: string): Promise<number>;
    /**
     * Sends a transfer transaction to the network.
     * @param input
     */
    transfer(input: {
        to: string;
        value: number;
        from?: string;
        nonce?: number;
    }): Promise<any>;
    /**
     * Signs a string data with the private key of the given address. It will use
     * the defaultAccount if an address is not provided.
     * @param {string} data
     * @param {string} address
     * @return {string} - signature
     */
    sign(data: string, address?: string): string;
    /**
     * Signs a transaction data with the private key of the given address. It will use
     * the defaultAccount if an address is not provided.
     * @param {TransactionBody} data
     * @param {string} address
     * @return {string} - signature
     */
    signTransaction(tx: TransactionBody, address?: string): string;
    getHashStrFromSig(signature: string): string;
    /**
     * Recovers an address of the account that was used to create the signature.
     * @param {string} signature
     * @return {string} - address
     */
    recover(signature: string): string;
    /**
     * Verifies if the signature is valid and was signed by the address.
     * @param {any} data
     * @param {string} signature
     * @param {string} address
     * @return {boolean}
     */
    verifySignature(data: any, signature: string, address: string): boolean;
    /**
     * Save the accounts in the wallet as V3 Keystores, locking them with the password.
     * @param {string} password
     * @param {V3KeystoreOptions} options
     * @return {V3Keystore[]}
     */
    toV3Keystore(password: string, options?: V3KeystoreOptions): V3Keystore[];
    /**
     * Converts an account into a V3 Keystore and encrypts it with a password
     * @param {TransactionBody} data
     * @param {string} address
     * @param {string} password
     * @param {V3KeystoreOptions} options
     * @return {V3Keystore}
     */
    accountToV3Keystore(address: string, password: string, options?: V3KeystoreOptions): V3Keystore;
    /**
     * Imports an account from a private key.
     * @param {Buffer} privateKey
     * @return {Account}
     */
    static fromPrivateKey(privateKey: Buffer): Account;
}
