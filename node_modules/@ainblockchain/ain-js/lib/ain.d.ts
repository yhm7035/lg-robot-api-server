import * as AinUtil from "@ainblockchain/ain-util";
import { Block, Transaction, TransactionBody, TransactionInput, ValueOnlyTransactionInput } from './types';
import Provider from './provider';
import Database from './ain-db/db';
import Wallet from './wallet';
import Network from './net';
export default class Ain {
    provider: Provider;
    db: Database;
    net: Network;
    wallet: Wallet;
    /**
     * @param {string} providerUrl
     * @constructor
     */
    constructor(providerUrl: string);
    /**
     * Sets a new provider
     * @param {string} providerUrl
     */
    setProvider(providerUrl: string): void;
    /**
     * A promise returns a block with the given hash or block number.
     * @param {string | number} blockHashOrBlockNumber
     * @param {boolean} returnTransactionObjects - If true, returns the full transaction objects;
     * otherwise, returns only the transaction hashes
     * @return {Promise<Block>}
     */
    getBlock(blockHashOrBlockNumber: string | number, returnTransactionObjects?: boolean): Promise<Block>;
    /**
     * A promise returns the address of the forger of given block
     * @param {string | number} blockHashOrBlockNumber
     * @return {Promise<string>}
     */
    getProposer(blockHashOrBlockNumber: string | number): Promise<string>;
    /**
     * A promise returns the list of validators for a given block
     * @param {string | number} blockHashOrBlockNumber
     * @return {Promise<string[]>}
     */
    getValidators(blockHashOrBlockNumber: string | number): Promise<string[]>;
    /**
     * Returns the transaction with the given transaaction hash.
     * @param {string} transactionHash
     * @return {Promise<Transaction>}
     */
    getTransaction(transactionHash: string): Promise<Transaction>;
    /**
     * Returns the result of the transaction with the given transaaction hash.
     * @param {string} transactionHash
     * @return {Promise<Transaction>}
     */
    /**
     * Signs and sends a transaction to the network
     * @param {TransactionInput} transactionObject
     * @return {Promise<any>}
     */
    sendTransaction(transactionObject: TransactionInput): Promise<any>;
    /**
     * Sends a signed transaction to the network
     * @param {string} signature
     * @param {TransactionBody} transaction
     * @return {Promise<any>}
     */
    sendSignedTransaction(signature: string, transaction: TransactionBody): Promise<any>;
    sendTransactionBatch(transactionObjects: TransactionInput[]): Promise<any>;
    /**
     * Sends a transaction that deposits AIN for consensus staking.
     * @param {ValueOnlyTransactionInput} transactionObject
     * @return {Promise<any>}
     */
    depositConsensusStake(transactionObject: ValueOnlyTransactionInput): Promise<any>;
    /**
     * Sends a transaction that withdraws AIN for consensus staking.
     * @param {ValueOnlyTransactionInput} transactionObject
     * @return {Promise<any>}
     */
    withdrawConsensusStake(transactionObject: ValueOnlyTransactionInput): Promise<any>;
    /**
     * Gets the amount of AIN currently staked for participating in consensus protocol.
     * @param {string} account - If not specified, will try to use the defaultAccount value.
     * @return {Promise<number>}
     */
    getConsensusStakeAmount(account?: string): Promise<number>;
    /**
     * Returns the current transaction count of account, which is the nonce of the account.
     * @param {object} args - May contain a string 'address' and a string 'from' values.
     *                        The 'address' indicates the address of the account to get the
     *                        nonce of, and the 'from' indicates where to get the nonce from.
     *                        It could be either the pending transaction pool ("pending") or
     *                        the committed blocks ("committed"). The default value is "committed".
     * @return {Promise<number>}
     */
    getNonce(args: {
        address?: string;
        from?: string;
    }): Promise<number>;
    /**
     * Builds a transaction body from transaction input.
     * @param {TransactionInput} transactionInput
     * @return {Promise<TransactionBody>}
     */
    buildTransactionBody(transactionInput: TransactionInput): Promise<TransactionBody>;
    /**
     * Getter for ain-util library
     */
    static readonly utils: typeof AinUtil;
    /**
     * Checks whether a given object is an instance of TransactionBody interface.
     * @param {string} account
     * @return {boolean}
     */
    static instanceofTransactionBody(object: any): object is TransactionBody;
    /**
     * A base function for all staking related database changes. It builds a
     * deposit/withdraw transaction and sends the transaction by calling sendTransaction().
     * @param {string} path
     * @param {ValueOnlyTransactionInput} transactionObject
     * @return {Promise<any>}
     */
    private stakeFunction;
}
