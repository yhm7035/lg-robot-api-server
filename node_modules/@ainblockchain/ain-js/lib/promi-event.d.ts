import * as EventEmitter from 'eventemitter3';
/**
 * A combination of a promise and an event emitter.
 * @implements {Promise<T>}
 */
export declare class PromiEvent<T> implements Promise<T> {
    eventEmitter: EventEmitter;
    promise: Promise<T>;
    private _resolve;
    private _reject;
    constructor();
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
    resolve(val: T): void;
    reject(reason: any): void;
    once(type: string, handler: (res: any) => void): PromiEvent<T>;
    on(type: string, handler: (res: any) => void): PromiEvent<T>;
    [Symbol.toStringTag]: 'Promise';
}
