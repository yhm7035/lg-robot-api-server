import { PromiEvent } from '../promi-event';
import { TransactionBody, TransactionInput } from '../types';
import Ain from '../ain';
export default class AbstractPromiEventMethod {
    promiEvent: PromiEvent<any>;
    private _rpcMethod;
    private _ain;
    private _tx;
    private _signature;
    /**
     * @param {String} rpcMethod
     * @param {Ain} ain
     * @param {TransactionInput | TransactionBody} tx
     * @param {String} signature
     * @constructor
     */
    constructor(rpcMethod: string, ain: Ain, tx: TransactionInput | TransactionBody, signature?: string);
    /**
     * This method will be executed before the RPC request.
     * It builds the transaction body from the transaction information.
     * @method beforeExecution
     */
    beforeExecution(): Promise<TransactionBody>;
    /**
     * Sends a JSON-RPC call request
     * @method execute
     * @returns {PromiEvent<any>}
     */
    execute(): PromiEvent<any>;
    /**
     * Getter for the rpcMethod property
     * @property rpcMethod
     * @returns {String}
     */
    get rpcMethod(): string;
    /**
     * This methods calls the correct error methods of the PromiEvent object.
     * @method handleError
     * @param {Error} error
     * @param {Object} result
     * @param {Number} confirmations
     */
    handleError(error: any, result: any, confirmations: any): void;
}
