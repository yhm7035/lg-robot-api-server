import { GetOperation, SetOperationType, GetOperationType, TransactionInput, ValueOnlyTransactionInput, SetMultiTransactionInput, EvalRuleInput, EvalOwnerInput, MatchInput } from '../types';
import Ain from '../ain';
export default class Reference {
    readonly path: string;
    readonly key: string | null;
    private _isRootReference;
    private _listeners;
    private _numberOfListeners;
    private _ain;
    /**
     * @param {Ain} ain An ain instance.
     * @param {String} path The path in the global state tree.
     * @constructor
     */
    constructor(ain: Ain, path?: string);
    /**
     * A getter for number of listeners.
     * @return {number} The number of listeners.
     */
    readonly numberOfListeners: number;
    /**
     * If value is given, it sets the value at a new child of this.path;
     * otherwise, it creates a key for a new child but doesn't set any values.
     * @param {any} value - A value to set at the path.
     * @return {Promise<any> | Reference} A reference instance of the given path.
     */
    push(value?: any): Promise<any> | Reference;
    /**
     * Returns the value at the path.
     * @param path
     */
    getValue(path?: string): Promise<any>;
    /**
     * Returns the rule at the path.
     * @param path
     */
    getRule(path?: string): Promise<any>;
    /**
     * Returns the owner config at the path.
     * @param path
     */
    getOwner(path?: string): Promise<any>;
    /**
     * Returns the function config at the path.
     * @param path
     */
    getFunction(path?: string): Promise<any>;
    /**
     * Returns the value / write rule / owner rule / function hash at multiple paths.
     * @param {Array<GetOperation>} requests - Array of get requests
     * Could be any one from "VALUE", "RULE", "OWNER", "FUNC" or a combination of them as an array.
     * @return {Promise<any>}
     */
    get(gets: GetOperation[]): Promise<any>;
    /**
     * Deletes a value.
     * @param {ValueOnlyTransactionInput} transactionInput - A transaction input object.
     * Any value given will be overwritten with null.
     * @return {Promise<any>}
     */
    deleteValue(transactionInput?: ValueOnlyTransactionInput): Promise<any>;
    /**
     * Sets a function config.
     * @param transactionInput
     */
    setFunction(transactionInput: ValueOnlyTransactionInput): Promise<any>;
    /**
     * Sets the owner rule.
     * @param {ValueOnlyTransactionInput} transactionInput - A transaction input object.
     * @return {Promise<any>}
     */
    setOwner(transactionInput: ValueOnlyTransactionInput): Promise<any>;
    /**
     * Sets the write rule.
     * @param {ValueOnlyTransactionInput} transactionInput - A transaction input object.
     * @return {Promise<any>}
     */
    setRule(transactionInput: ValueOnlyTransactionInput): Promise<any>;
    /**
     * Sets a value.
     * @param {ValueOnlyTransactionInput} transactionInput - A transaction input object.
     * @return {Promise<any>}
     */
    setValue(transactionInput: ValueOnlyTransactionInput): Promise<any>;
    /**
     * Increments the value.
     * @param {ValueOnlyTransactionInput} transactionInput - A transaction input object.
     * @return {Promise<any>}
     */
    incrementValue(transactionInput: ValueOnlyTransactionInput): Promise<any>;
    /**
     * Decrements the value.
     * @param {ValueOnlyTransactionInput} transactionInput - A transaction input object.
     * @return {Promise<any>}
     */
    decrementValue(transactionInput: ValueOnlyTransactionInput): Promise<any>;
    /**
     * Processes multiple set operations.
     * @param {SetMultiTransactionInput} transactionInput - A transaction input object.
     * @return {Promise<any>}
     */
    set(transactionInput: SetMultiTransactionInput): Promise<any>;
    /**
     * Returns the rule evaluation result. True if the params satisfy the write rule,
     * false if not.
     * @param params
     */
    evalRule(params: EvalRuleInput): Promise<boolean>;
    /**
     * Returns the owner evaluation result.
     * @param params
     */
    evalOwner(params: EvalOwnerInput): Promise<any>;
    /**
     * Returns the function configs that are related to the input ref.
     * @param params
     */
    matchFunction(params?: MatchInput): Promise<any>;
    /**
     * Returns the rule configs that are related to the input ref.
     * @param params
     */
    matchRule(params?: MatchInput): Promise<any>;
    /**
     * Returns the owner configs that are related to the input ref.
     * @param params
     */
    matchOwner(params?: MatchInput): Promise<any>;
    /**
     * TODO (lia): Add this function
     * Attaches an listener for database events.
     * @param {EventType} event - A type of event.
     * @param {Function} callback function to be executed when an event occurs.
     */
    /**
     * TODO (lia): Add this function
     * Removes a database event listener.
     * @param {EventType} event - A type of event.
     * @param {Function} callback - A callback function to dettach from the event.
     */
    /**
     * Returns a get request
     * @param type
     * @param ref
     */
    static buildGetRequest(type: GetOperationType, ref: string): {
        type: GetOperationType;
        ref: string;
    };
    /**
     * Returns a path that is the basePath extended with extension.
     * @param basePath
     * @param extension
     */
    static extendPath(basePath?: string, extension?: string): string;
    /**
     * Decorates a transaction input with an appropriate type, ref and value.
     * @param {ValueOnlyTransactionInput} input - A transaction input object
     * @param {string} ref - The path at which set operations will take place
     * @param {SetOperationType} type - A type of set operations
     * @return {TransactionInput}
     */
    static extendSetTransactionInput(input: ValueOnlyTransactionInput, ref: string, type: SetOperationType): TransactionInput;
    /**
     * Decorates a transaction input with an appropriate type and op_list.
     * @param {SetMultiTransactionInput} input - A transaction input object
     * @param {string} ref - The path at which set operations will take place
     * @param {SetMultiOperationType} type - A type of set operations
     * @return {TransactionInput}
     */
    static extendSetMultiTransactionInput(input: SetMultiTransactionInput, ref: string): TransactionInput;
    /**
     * Returns a sanitized ref. If should have a slash at the
     * beginning and no slash at the end.
     * @param ref
     */
    static sanitizeRef(ref?: string): string;
}
